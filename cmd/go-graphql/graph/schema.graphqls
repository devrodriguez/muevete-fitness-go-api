type Category {
    id: ID!
    name: String!
}

type Customer {
    id: ID!
    name: String!
    lastName: String!
    email: String!
}

type Routine {
    id: ID!
    name: String!
    description: String!
}

type RoutineSchedule {
    id: ID!
    routine: Routine!
    weekDay: WeekDay!
}

type SessionSchedule {
    id: ID!
    customer: Customer!
    weekly: Weekly!
}

type WeekDay {
    id: ID!
    name: String!
    numericDay: Int!
}

type Weekly {
    id: ID!
    session: Session!
    routineSchedule: RoutineSchedule!
}

type Session {
    id: ID!
    name: String!
    startHour: String!
    finalHour: String!
    period: String!
}

type Query {
    categories: [Category!]
    customers: [Customer!]!
    routines: [Routine!]!
    sessions: [Session!]!
    weekDays: [WeekDay!]
    routineSchedules: [RoutineSchedule!]
    sessionSchedules: [SessionSchedule!]
}

input NewCategory {
    name: String!
}

input NewCustomer {
    name: String!
    lastName: String!
    email: String!
}

input NewRoutine {
    name: String!
    description: String!
}

input NewRoutineSchedule {
    routine: String!
    weekDay: String!
}

input NewSession {
    name: String!
    startHour: String!
    finalHour: String!
    period: String!
}

input NewSessionSchedule {
    customer: String!
    weekly: String!
}

input NewWeekDay {
    name: String!
    numericDay: Int!
}

type Mutation {
    createCategory(input: NewCategory!): Category!
    createCustomer(input: NewCustomer!): Customer!
    createRoutine(input: NewRoutine!): Routine!
    createRoutineSchedule(input: NewRoutineSchedule!): RoutineSchedule!
    createSessionSchedule(input: NewSessionSchedule!): SessionSchedule!
    createSession(input: NewSession!): Session!
    createWeekDay(input: NewWeekDay!): WeekDay!
}